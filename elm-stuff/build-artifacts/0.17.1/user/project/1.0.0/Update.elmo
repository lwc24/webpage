var _user$project$Update$edit = F2(
	function (model, id) {
		var newPlays = A2(
			_elm_lang$core$List$map,
			function (play) {
				return _elm_lang$core$Native_Utils.eq(play.playerId, id) ? _elm_lang$core$Native_Utils.update(
					play,
					{name: model.name}) : play;
			},
			model.plays);
		var newPlayers = A2(
			_elm_lang$core$List$map,
			function (player) {
				return _elm_lang$core$Native_Utils.eq(player.id, id) ? _elm_lang$core$Native_Utils.update(
					player,
					{name: model.name}) : player;
			},
			model.players);
		return _elm_lang$core$Native_Utils.update(
			model,
			{players: newPlayers, plays: newPlays, name: '', playerId: _elm_lang$core$Maybe$Nothing});
	});
var _user$project$Update$add = function (model) {
	var player = A3(
		_user$project$Models$Player,
		_elm_lang$core$List$length(model.players),
		model.name,
		0);
	var newPlayers = A2(_elm_lang$core$List_ops['::'], player, model.players);
	return _elm_lang$core$Native_Utils.update(
		model,
		{players: newPlayers, name: ''});
};
var _user$project$Update$save = function (model) {
	var _p0 = model.playerId;
	if (_p0.ctor === 'Nothing') {
		return _user$project$Update$add(model);
	} else {
		return A2(_user$project$Update$edit, model, _p0._0);
	}
};
var _user$project$Update$score = F3(
	function (model, scoredPlayer, points) {
		var newPlay = A4(
			_user$project$Models$Play,
			_elm_lang$core$List$length(model.plays),
			scoredPlayer.id,
			scoredPlayer.name,
			points);
		var newPlays = A2(_elm_lang$core$List_ops['::'], newPlay, model.plays);
		var newPlayers = A2(
			_elm_lang$core$List$map,
			function (player) {
				return _elm_lang$core$Native_Utils.eq(player.id, scoredPlayer.id) ? _elm_lang$core$Native_Utils.update(
					player,
					{points: player.points + points}) : player;
			},
			model.players);
		return _elm_lang$core$Native_Utils.update(
			model,
			{plays: newPlays, players: newPlayers});
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Input':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{name: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Cancel':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{name: '', playerId: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Save':
				return _elm_lang$core$String$isEmpty(
					_elm_lang$core$Basics$toString(model.name)) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: _user$project$Update$save(model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Score':
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$Update$score, model, _p1._0, _p1._1),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Edit':
				var _p2 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							name: _p2.name,
							playerId: _elm_lang$core$Maybe$Just(_p2.id)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Update$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
