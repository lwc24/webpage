var _user$project$State$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$mouse$Mouse$moves(_user$project$Types$PositMsg),
				A2(_elm_lang$core$Time$every, 10 * _elm_lang$core$Time$millisecond, _user$project$Types$Tick)
			]));
};
var _user$project$State$relPos = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		return {ctor: '_Tuple2', _0: _p3._0 - _p2._0, _1: _p3._1 - _p2._1};
	});
var _user$project$State$mousePill = F2(
	function (pill, pos) {
		return _elm_lang$core$Native_Utils.update(
			pill,
			{pos: pos});
	});
var _user$project$State$getStartTime = A3(_elm_lang$core$Task$perform, _user$project$Types$NoOp, _user$project$Types$StartTick, _elm_lang$core$Time$now);
var _user$project$State$initialPill = {
	id: 0,
	pos: {ctor: '_Tuple2', _0: 0, _1: 0},
	vel: {ctor: '_Tuple2', _0: 50, _1: 50},
	radius: 15,
	time: 0.0
};
var _user$project$State$initialModel = {
	pills: _elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$core$Native_Utils.update(
			_user$project$State$initialPill,
			{id: 0}),
			_elm_lang$core$Native_Utils.update(
			_user$project$State$initialPill,
			{id: 1})
		]),
	elapsedTime: 0.0,
	startTime: 0.0
};
var _user$project$State$init = {ctor: '_Tuple2', _0: _user$project$State$initialModel, _1: _user$project$State$getStartTime};
var _user$project$State$vecMult = F2(
	function (scale, _p4) {
		var _p5 = _p4;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$round(
				scale * _elm_lang$core$Basics$toFloat(_p5._0)),
			_1: _elm_lang$core$Basics$round(
				scale * _elm_lang$core$Basics$toFloat(_p5._1))
		};
	});
var _user$project$State$vecAdd = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p9 = _p6;
		return {ctor: '_Tuple2', _0: _p8._0 + _p9._0, _1: _p8._1 + _p9._1};
	});
var _user$project$State$stepPill = F2(
	function (mdl, pill) {
		var tstep = mdl.elapsedTime - pill.time;
		var newPos = A2(
			_user$project$State$vecAdd,
			pill.pos,
			A2(_user$project$State$vecMult, tstep, pill.vel));
		return (!_elm_lang$core$Native_Utils.eq(newPos, pill.pos)) ? _elm_lang$core$Native_Utils.update(
			pill,
			{pos: newPos, time: mdl.elapsedTime}) : pill;
	});
var _user$project$State$update = F2(
	function (msg, model) {
		var _p10 = msg;
		switch (_p10.ctor) {
			case 'PositMsg':
				var _p11 = _p10._0;
				var newPills = A2(
					_elm_lang$core$List$map,
					function (pill) {
						return _elm_lang$core$Native_Utils.eq(pill.id, 0) ? A2(
							_user$project$State$mousePill,
							pill,
							A2(
								_user$project$State$relPos,
								{ctor: '_Tuple2', _0: 110, _1: 10},
								{ctor: '_Tuple2', _0: _p11.x, _1: _p11.y})) : pill;
					},
					model.pills);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pills: newPills}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pills: A2(
								_elm_lang$core$List$map,
								function (pill) {
									return (!_elm_lang$core$Native_Utils.eq(pill.id, 0)) ? A2(_user$project$State$stepPill, model, pill) : pill;
								},
								model.pills),
							elapsedTime: _elm_lang$core$Time$inSeconds(_p10._0) - model.startTime
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'StartTick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							startTime: _elm_lang$core$Time$inSeconds(_p10._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
