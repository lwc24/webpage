var _user$project$State$subscriptions = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.bStarted, false) ? _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$mouse$Mouse$clicks(_user$project$Types$StartClick)
			])) : _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$mouse$Mouse$moves(_user$project$Types$PositMsg),
				A2(_elm_lang$core$Time$every, 20 * _elm_lang$core$Time$millisecond, _user$project$Types$Tick),
				A2(_elm_lang$core$Time$every, 100 * _elm_lang$core$Time$millisecond, _user$project$Types$Counter)
			]));
};
var _user$project$State$countGame = F2(
	function (time, model) {
		var newLevel = ((!_elm_lang$core$Native_Utils.eq(model.counter, 0)) && (_elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], model.counter, (20 * model.level) + 20),
			0) && (_elm_lang$core$Native_Utils.cmp(model.level, 9) < 0))) ? (model.level + 1) : model.level;
		var newCounter = (!_elm_lang$core$Native_Utils.eq(model.level, newLevel)) ? 0 : (model.counter + 1);
		var command = ((!_elm_lang$core$Native_Utils.eq(model.counter, 0)) && _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], model.counter, 10 - model.level),
			0)) ? A2(
			_elm_lang$core$Random$generate,
			_user$project$Types$AddPill,
			A2(
				_elm_lang$core$Random$int,
				_elm_lang$core$Basics$fst(model.xlims),
				_elm_lang$core$Basics$snd(model.xlims))) : _elm_lang$core$Platform_Cmd$none;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{counter: newCounter, level: newLevel}),
			_1: command
		};
	});
var _user$project$State$relPos = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		return {ctor: '_Tuple2', _0: _p3._0 - _p2._0, _1: _p3._1 - _p2._1};
	});
var _user$project$State$movePlayer = F2(
	function (position, model) {
		var mousePos = A2(
			_user$project$State$relPos,
			{ctor: '_Tuple2', _0: 110, _1: 10},
			position);
		var movedPills = A2(
			_elm_lang$core$List$map,
			function (pill) {
				return _elm_lang$core$Native_Utils.eq(pill.id, 0) ? _elm_lang$core$Native_Utils.update(
					pill,
					{pos: mousePos}) : pill;
			},
			model.pills);
		return _elm_lang$core$Native_Utils.update(
			model,
			{pills: movedPills});
	});
var _user$project$State$initialPill = {
	id: 0,
	pos: {ctor: '_Tuple2', _0: 0, _1: 0},
	vel: {ctor: '_Tuple2', _0: 0, _1: 50},
	radius: 15,
	color: 'red',
	modTime: 0.0,
	aliveTime: 0.0,
	birthTime: 0.0
};
var _user$project$State$initialModel = {
	bStarted: false,
	elapsedTime: 0.0,
	startTime: 0.0,
	counter: 0,
	level: 1,
	score: 0,
	xlims: {ctor: '_Tuple2', _0: 0, _1: 400},
	ylims: {ctor: '_Tuple2', _0: 0, _1: 400},
	pills: _elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$core$Native_Utils.update(
			_user$project$State$initialPill,
			{id: 0, color: 'blue'})
		])
};
var _user$project$State$init = {
	ctor: '_Tuple2',
	_0: _user$project$State$initialModel,
	_1: A3(_elm_lang$core$Task$perform, _user$project$Types$NoOp, _user$project$Types$StartTick, _elm_lang$core$Time$now)
};
var _user$project$State$vecMult = F2(
	function (scalar, _p4) {
		var _p5 = _p4;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$round(
				scalar * _elm_lang$core$Basics$toFloat(_p5._0)),
			_1: _elm_lang$core$Basics$round(
				scalar * _elm_lang$core$Basics$toFloat(_p5._1))
		};
	});
var _user$project$State$vecDist = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p9 = _p6;
		var y2 = _elm_lang$core$Basics$toFloat(_p9._1);
		var y1 = _elm_lang$core$Basics$toFloat(_p8._1);
		var x2 = _elm_lang$core$Basics$toFloat(_p9._0);
		var x1 = _elm_lang$core$Basics$toFloat(_p8._0);
		return _elm_lang$core$Basics$sqrt(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)));
	});
var _user$project$State$vecAdd = F2(
	function (_p11, _p10) {
		var _p12 = _p11;
		var _p13 = _p10;
		return {ctor: '_Tuple2', _0: _p12._0 + _p13._0, _1: _p12._1 + _p13._1};
	});
var _user$project$State$stepPill = F2(
	function (tstep, pill) {
		var newPos = A2(
			_user$project$State$vecAdd,
			pill.pos,
			A2(
				_user$project$State$vecMult,
				tstep,
				A2(_user$project$State$vecMult, 5.5 - (1.0 * pill.aliveTime), pill.vel)));
		return (!_elm_lang$core$Native_Utils.eq(newPos, pill.pos)) ? _elm_lang$core$Native_Utils.update(
			pill,
			{pos: newPos, modTime: pill.modTime + tstep, aliveTime: (pill.modTime + tstep) - pill.birthTime}) : pill;
	});
var _user$project$State$stepGame = F2(
	function (time, model) {
		var player = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$State$initialPill,
			_elm_lang$core$List$head(model.pills));
		var playPos = player.pos;
		var collPills = A2(
			_elm_lang$core$List$filter,
			function (pill) {
				return ((!_elm_lang$core$Native_Utils.eq(pill.id, 0)) && (_elm_lang$core$Native_Utils.cmp(
					A2(_user$project$State$vecDist, pill.pos, playPos),
					_elm_lang$core$Basics$toFloat(pill.radius) * 2) < 0)) ? false : true;
			},
			model.pills);
		var newScore = (!_elm_lang$core$Native_Utils.eq(collPills, model.pills)) ? (model.score + 1) : model.score;
		var movedPills = A2(
			_elm_lang$core$List$map,
			function (pill) {
				return (!_elm_lang$core$Native_Utils.eq(pill.id, 0)) ? A2(_user$project$State$stepPill, model.elapsedTime - pill.modTime, pill) : pill;
			},
			collPills);
		var filteredPills = A2(
			_elm_lang$core$List$filter,
			function (pill) {
				return ((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Basics$snd(pill.pos),
					420) > 0) && (!_elm_lang$core$Native_Utils.eq(pill.id, 0))) ? false : true;
			},
			movedPills);
		var command = (!_elm_lang$core$Native_Utils.eq(filteredPills, movedPills)) ? A3(
			_elm_lang$core$Task$perform,
			_user$project$Types$NoOp,
			_user$project$Types$EndGame,
			_elm_lang$core$Task$succeed('Game Ended')) : _elm_lang$core$Platform_Cmd$none;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					pills: filteredPills,
					elapsedTime: _elm_lang$core$Time$inSeconds(time) - model.startTime,
					score: newScore
				}),
			_1: command
		};
	});
var _user$project$State$update = F2(
	function (msg, model) {
		var _p14 = msg;
		switch (_p14.ctor) {
			case 'StartTick':
				return {ctor: '_Tuple2', _0: _user$project$State$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'StartClick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_user$project$State$initialModel,
						{bStarted: true, score: 0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'EndGame':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_user$project$State$initialModel,
						{score: model.score}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PositMsg':
				var _p15 = _p14._0;
				return {
					ctor: '_Tuple2',
					_0: A2(
						_user$project$State$movePlayer,
						{ctor: '_Tuple2', _0: _p15.x, _1: _p15.y},
						model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Tick':
				return A2(_user$project$State$stepGame, _p14._0, model);
			case 'Counter':
				return A2(_user$project$State$countGame, _p14._0, model);
			case 'AddPill':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pills: function (pills) {
								return A2(
									_elm_lang$core$List$append,
									pills,
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Native_Utils.update(
											_user$project$State$initialPill,
											{
												id: _elm_lang$core$List$length(pills),
												birthTime: model.elapsedTime,
												modTime: model.elapsedTime,
												pos: {ctor: '_Tuple2', _0: _p14._0, _1: 0}
											})
										]));
							}(model.pills)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
